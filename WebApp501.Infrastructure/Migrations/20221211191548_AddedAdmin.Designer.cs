// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp501.Infrastructure.Data;

#nullable disable

namespace WebApp501.Infrastructure.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    [Migration("20221211191548_AddedAdmin")]
    partial class AddedAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Bartender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bartenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 28,
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Byalkov",
                            UserId = "726719c4-8995-4426-9c00-1cb0831621d4"
                        },
                        new
                        {
                            Id = 4,
                            Age = 33,
                            FirstName = "Great",
                            IsDeleted = false,
                            LastName = "Admin",
                            UserId = "bcb4f072-ecca-43c9-ab26-c060c6f364e4"
                        });
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlcoholId")
                        .HasColumnType("int");

                    b.Property<int>("BartenderId")
                        .HasColumnType("int");

                    b.Property<int>("GlassId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Preparation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AlcoholId");

                    b.HasIndex("BartenderId");

                    b.HasIndex("GlassId");

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholId = 1,
                            BartenderId = 1,
                            GlassId = 1,
                            IsDeleted = false,
                            Name = "Gauguin",
                            Preparation = "Place the crushed ice, rum, syrup and lemon juice in a blender and blend on low speed for 15 seconds. Strain the resulting mixture into an old fashioned glass and garnish with the cocktail cherry.",
                            Recipe = "3 parts crushed ice\r\n2 parts white rum\r\n2 tsp passion fruit syrup\r\n2 tsp lemon juice\r\n1 tsp lime juice\r\n1 cocktail cherry for decoration"
                        },
                        new
                        {
                            Id = 2,
                            AlcoholId = 2,
                            BartenderId = 1,
                            GlassId = 20,
                            IsDeleted = false,
                            Name = "Toulon",
                            Preparation = "Place the ice cubes in a serving glass and pour the vermouth, liqueur and brandy over them and stir vigorously. Strain the resulting mixture into a chilled cocktail glass and garnish with the orange peel.",
                            Recipe = "4-5 ice cubes\r\n1 part dry vermouth\r\n1 part Benedictine liqueur\r\n3 parts brandy\r\na strip of orange peel for decoration"
                        },
                        new
                        {
                            Id = 3,
                            AlcoholId = 3,
                            BartenderId = 1,
                            GlassId = 4,
                            IsDeleted = false,
                            Name = "Sweet Sixteen",
                            Preparation = "Place half the ice cubes in a shaker, pour over the gin, lime juice, grenadine and sugar syrup and shake until frosty. Put the remaining ice in a tall glass, strain the resulting mixture over the ice and top up the glass with lemon bitters. Finally, garnish with the lemon peel.",
                            Recipe = "6-8 ice cubes\r\n2 parts gin\r\njuice of half a green lemon\r\n2 dashes of grenadine\r\n1 tsp sugar syrup\r\nlemon bitters\r\nlemon zest for garnish"
                        },
                        new
                        {
                            Id = 4,
                            AlcoholId = 4,
                            BartenderId = 1,
                            GlassId = 4,
                            IsDeleted = false,
                            Name = "Sex on the Beach",
                            Preparation = "Add a few ice cubes to the shaker along with the vodka, schnapps, cranberry juice, orange juice and pineapple juice (if desired) and shake well. Put 3-4 ice cubes in a tall glass and pour the resulting mixture over them. Finally, garnish the drink with the green lemon slices and the orange slices and serve the cocktail with a straw.",
                            Recipe = "ice cubes\r\n1 part vodka\r\n1 part peach schnapps\r\n1 part cranberry juice\r\n1 part orange juice\r\n1 part pineapple juice (optional)\r\norange slices for decoration\r\nslices of green lemon for decoration"
                        },
                        new
                        {
                            Id = 5,
                            AlcoholId = 5,
                            BartenderId = 1,
                            GlassId = 1,
                            IsDeleted = false,
                            Name = "Rhett Butler",
                            Preparation = "Place the ice cubes in a shaker along with the bourbon, cranberry juice, sugar syrup and lime juice and shake well. Strain the resulting mixture into an old fashioned glass filled with ice cubes, garnish with a lemon wedge and serve with a short straw.",
                            Recipe = "4-5 ice cubes and extra for serving\r\n2 parts bourbon whiskey\r\n4 parts cranberry juice\r\n2 tbsp sugar syrup\r\n1 tbsp fresh lemon juice\r\na slice of green lemon for garnish"
                        },
                        new
                        {
                            Id = 6,
                            AlcoholId = 6,
                            BartenderId = 1,
                            GlassId = 18,
                            IsDeleted = false,
                            Name = "Cheshire Cat",
                            Preparation = "Put the ice cubes in a serving glass, pour over them the brandy, vermouth and orange juice and stir until a homogeneous mixture is obtained. Strain the resulting mixture into a tall champagne glass and top up with champagne. Squeeze the essential oil from one orange peel into the drink and garnish with a spiral orange peel.",
                            Recipe = "4-5 ice cubes\r\n1 part brandy\r\n1 part sweet vermouth\r\nchampagne\r\norange peels for garnish"
                        },
                        new
                        {
                            Id = 7,
                            AlcoholId = 7,
                            BartenderId = 1,
                            GlassId = 4,
                            IsDeleted = false,
                            Name = "Mexicana",
                            Preparation = "Place half of the ice cubes in a shaker along with the tequila, raspberry liqueur and fruit juices and shake vigorously for about 10 seconds. Put the remaining ice cubes in a tall glass and pour the resulting mixture over them. Finally, garnish the drink with the pineapple and lemon slice.",
                            Recipe = "8-10 ice cubes\r\n1 1/4 parts tequila\r\n3/4 part raspberry liqueur\r\n3/4 part fresh lemon juice\r\n3 1/2 parts pineapple juice\r\npineapple slice for garnish\r\nlemon slice for garnish"
                        },
                        new
                        {
                            Id = 8,
                            AlcoholId = 8,
                            BartenderId = 1,
                            GlassId = 37,
                            IsDeleted = false,
                            Name = "Slippery Nipple",
                            Preparation = "Pour the Sambuca liqueur into a tequila (shot) glass, then using the back of a bar spoon, slowly pour the Irish liqueur over the Sambuca so that the two liqueurs do not mix.",
                            Recipe = "1 part \"Sambuca\" liqueur\r\n1/2 part Baileys Irish Liqueur"
                        },
                        new
                        {
                            Id = 9,
                            AlcoholId = 9,
                            BartenderId = 1,
                            GlassId = 20,
                            IsDeleted = false,
                            Name = "Bitter Sweet",
                            Preparation = "Put the crushed ice in a shaker, pour on it 2 tbsp of the sparkling water and bitters, add the mint leaves and mix until frost forms. Pour the resulting mixture into a chilled glass, fill it with sparkling water and decorate the drink with slices of green or yellow lemon.",
                            Recipe = "crushed ice\r\n150 ml sparkling water\r\n2 dashes \"Angostura\" bitters\r\n6-8 mint leaves\r\ngreen or yellow lemon circles for decoration"
                        });
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Glass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Glasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://m.media-amazon.com/images/I/51ErdYtGOAL.jpg",
                            IsDeleted = false,
                            Name = "Old Fashioned Glass"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://www.cocktailkingdom.com/media/catalog/product/cache/1/image/364x/040ec09b1e35df139433887a97daa66f/g/l/gla_ckrksyarai_6101_clr_web1_1.jpg",
                            IsDeleted = false,
                            Name = "Rocks Glass"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://johnlewis.scene7.com/is/image/JohnLewis/233596730?$rsp-pdp-port-640$",
                            IsDeleted = false,
                            Name = "Cosmopolitan Glass"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://m.media-amazon.com/images/I/31ncXtqfK7L._SL500_.jpg",
                            IsDeleted = false,
                            Name = "Highball Glass"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://m.media-amazon.com/images/I/31vvQmBDhdL.jpg",
                            IsDeleted = false,
                            Name = "Collins Glass"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://cdn.shoplightspeed.com/shops/606142/files/5865756/1500x4000x3/fizz-zombie-glass-135-oz.jpg",
                            IsDeleted = false,
                            Name = "Zombie Glass"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://hosteleria.araven.com/sites/default/files/styles/producto/public/91641_copa_weiser_cerveza.jpg?itok=9N2yaZRa",
                            IsDeleted = false,
                            Name = "Weizen Glass"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://www.ikea.com/my/en/images/products/oanvaend-beer-glass-clear-glass__0713254_pe729369_s5.jpg",
                            IsDeleted = false,
                            Name = "Pilsner Glass"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0520/0943/5294/products/UB15.jpg?v=1616053755",
                            IsDeleted = false,
                            Name = "Sling Glass"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://cdnimg.webstaurantstore.com/images/products/large/41072/2310339.jpg",
                            IsDeleted = false,
                            Name = "Pint Glass"
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://www.ikea.com/us/en/images/products/mjoed-beer-mug-clear-glass__0525765_pe644916_s5.jpg?f=s",
                            IsDeleted = false,
                            Name = "Beer Mug"
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "https://www.sbb-bg.com/image/cache/catalog/images/Uniglass/1076_44856-550x700w.jpg",
                            IsDeleted = false,
                            Name = "Irish Coffee Glass"
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "https://m.media-amazon.com/images/I/51pEW1I+FJL._SY879_.jpg",
                            IsDeleted = false,
                            Name = "Red Wine Glass"
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "https://www.ikea.com/gb/en/images/products/dyrgrip-white-wine-glass-clear-glass__0712421_pe728840_s5.jpg?f=s",
                            IsDeleted = false,
                            Name = "White Wine Glass"
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "https://www.intornoalvino.com/731-large_default/red-wine-glasses-ballon-vineas.jpg",
                            IsDeleted = false,
                            Name = "Ballon Wine Glass"
                        },
                        new
                        {
                            Id = 16,
                            ImageUrl = "https://media.nisbets.com/asset/core/prodimage/large_new/gf738_g817-1707.jpg",
                            IsDeleted = false,
                            Name = "Wine Tasting Glass"
                        },
                        new
                        {
                            Id = 17,
                            ImageUrl = "https://m.media-amazon.com/images/I/61DcUapHwjL.jpg",
                            IsDeleted = false,
                            Name = "Sherry Glass"
                        },
                        new
                        {
                            Id = 18,
                            ImageUrl = "https://5.imimg.com/data5/CU/RU/SE/SELLER-25193472/ocean-champagne-flute-glass-500x500.jpg",
                            IsDeleted = false,
                            Name = "Champagne Flute"
                        },
                        new
                        {
                            Id = 19,
                            ImageUrl = "https://www.ikea.com/gb/en/images/products/storhet-champagne-coupe-clear-glass__0713258_pe729368_s5.jpg",
                            IsDeleted = false,
                            Name = "Champagne Coupe"
                        },
                        new
                        {
                            Id = 20,
                            ImageUrl = "https://www.ikea.com/ca/en/images/products/storsint-martini-glass-clear-glass__0800268_pe767839_s5.jpg",
                            IsDeleted = false,
                            Name = "Martini Glass"
                        },
                        new
                        {
                            Id = 21,
                            ImageUrl = "https://www.ikea.com/om/en/images/products/festlighet-margarita-glass__0712417_pe728836_s5.jpg?f=s",
                            IsDeleted = false,
                            Name = "Margarita Glass"
                        },
                        new
                        {
                            Id = 22,
                            ImageUrl = "https://www.webstaurantstore.com/images/products/large/88017/1877520.jpg",
                            IsDeleted = false,
                            Name = "Goblet Glass"
                        },
                        new
                        {
                            Id = 23,
                            ImageUrl = "http://www.ajmara.pl/upd_cnt/attch/img_pro/colibri_pokal_do_piwa.jpg",
                            IsDeleted = false,
                            Name = "Pokal Glass"
                        },
                        new
                        {
                            Id = 24,
                            ImageUrl = "https://www.drinkstuff.com/productimg/47978_large.jpg",
                            IsDeleted = false,
                            Name = "Milkshake Glass"
                        },
                        new
                        {
                            Id = 25,
                            ImageUrl = "https://cdnimg.webstaurantstore.com/images/products/large/232957/2396272.jpg",
                            IsDeleted = false,
                            Name = "Hurricane Glass"
                        },
                        new
                        {
                            Id = 26,
                            ImageUrl = "https://m.media-amazon.com/images/I/41a1riW3YxL.jpg",
                            IsDeleted = false,
                            Name = "Poco Grande Glass"
                        },
                        new
                        {
                            Id = 27,
                            ImageUrl = "https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1571017071-31p5xeITE9L.jpg?crop=1xw:0.938xh",
                            IsDeleted = false,
                            Name = "Brandy Snifter"
                        },
                        new
                        {
                            Id = 28,
                            ImageUrl = "http://1.bp.blogspot.com/-ZWq1ngNmIQM/VGZVL090-CI/AAAAAAAAbtU/L1lk0iv8_kQ/s1600/Cognac-Delamain-with-Baccarat-Le-Voyage-Decanter-Bottle-2.jpg",
                            IsDeleted = false,
                            Name = "Wobble Cognac Glass"
                        },
                        new
                        {
                            Id = 29,
                            ImageUrl = "https://boomingglassware.com/wp-content/uploads/2019/08/BMWky-02%EF%BC%881%EF%BC%89.jpg",
                            IsDeleted = false,
                            Name = "Tulip Whisky Glass"
                        },
                        new
                        {
                            Id = 30,
                            ImageUrl = "https://glassmania.com/media/catalog/product/cache/6b9c9ff9456b96523530d9a877110061/n/v/nvr42bsen_1.png",
                            IsDeleted = false,
                            Name = "Tulip Glass"
                        },
                        new
                        {
                            Id = 31,
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0615/8575/2295/products/Plain_-_Vintage_Grappa_Glass_-_66110_-_1052488_v1_1800x1800_56febef2-76df-4c4a-9a15-33d885d9944d_1500x.jpg?v=1640309929",
                            IsDeleted = false,
                            Name = "Grappa Glass"
                        },
                        new
                        {
                            Id = 32,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQKc6d02gFVbrW57FF9OVXAiqUcAb8YkgPhGMWGpxaCGQ&s",
                            IsDeleted = false,
                            Name = "Pousse Cafe Glass"
                        },
                        new
                        {
                            Id = 33,
                            ImageUrl = "https://secure.img1-cg.wfcdn.com/im/54073283/resize-h600-w600%5Ecompr-r85/1612/16121821/Cordial+Glasses.jpg",
                            IsDeleted = false,
                            Name = "Cordial Glass"
                        },
                        new
                        {
                            Id = 34,
                            ImageUrl = "https://assets.manufactum.de/p/020/020056/20056_01.jpg/absinthe-glass-la-rochere.jpg",
                            IsDeleted = false,
                            Name = "Absinthe Glass"
                        },
                        new
                        {
                            Id = 35,
                            ImageUrl = "https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/vodka-glasses-1638468889.jpg?crop=0.502xw:1.00xh;0.250xw,0&resize=640:*",
                            IsDeleted = false,
                            Name = "Vodka Glass"
                        },
                        new
                        {
                            Id = 36,
                            ImageUrl = "https://m.media-amazon.com/images/I/51MpZbNhM-L.jpg",
                            IsDeleted = false,
                            Name = "Shooter Glass"
                        },
                        new
                        {
                            Id = 37,
                            ImageUrl = "https://media.istockphoto.com/id/178410979/photo/empty-glass.jpg?s=612x612&w=0&k=20&c=BcS4A2H_nxwc4uTWOHb2vRjLs_DgIOWk2aL4tKDzHv4=",
                            IsDeleted = false,
                            Name = "Shot Glass"
                        });
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CocktailId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CocktailId")
                        .IsUnique();

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CocktailId = 1,
                            ImageUrl = "https://cdn.diffords.com/contrib/stock-images/2018/05/5af304cee08a4.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CocktailId = 4,
                            ImageUrl = "https://copykat.com/wp-content/uploads/2022/05/Sex-on-the-Beach-Drink-Pin-9.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CocktailId = 5,
                            ImageUrl = "https://cdn.diffords.com/contrib/stock-images/2017/1/16/20177572d2119c567079c338b14db4eb375e.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CocktailId = 6,
                            ImageUrl = "https://media-cdn.tripadvisor.com/media/photo-m/1280/13/88/99/f9/cheshire-cat-cocktail.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CocktailId = 7,
                            ImageUrl = "https://vinepair.com/wp-content/uploads/2017/09/Mexicano_Card.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CocktailId = 8,
                            ImageUrl = "https://cocktailsandshots.com/wp-content/uploads/2018/06/Slippery-nipple-shot-recipe-with-ingredients-sambuca-baileys.jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CocktailId = 9,
                            ImageUrl = "https://cdn.diffords.com/contrib/stock-images/2016/10/53/201600e4ec5eb6ed8167e09d75ed35abe569.jpg",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.TypeOfAlcohol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Alcohols");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Brandy"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Whiskey"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Wine and Champagne"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Tequila"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Other Alcoholic Beverages and Liqueurs"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Non-alcoholic Cocktails"
                        });
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "726719c4-8995-4426-9c00-1cb0831621d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac2a887e-8f53-48a4-95d5-805ea430eb49",
                            Email = "dbyalkov@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Nikolaev",
                            NormalizedEmail = "DBYALKOV@ABV.BG",
                            NormalizedUserName = "DBYALKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEJBg4xohcg6LGWqiNfKlyGHflzArAiRBWvuI9N74LMjMeKs2qA6/i2aksaAw9oiswA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7233c94-d24c-4b26-a39f-9dfeda7e4280",
                            TwoFactorEnabled = false,
                            UserName = "dbyalkov"
                        },
                        new
                        {
                            Id = "30342ffd-ffd8-4e66-9348-da6a2068856e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf6fdee4-5d41-45cb-a30f-9f40f4a39047",
                            Email = "doomar@abv.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Dimitrov",
                            NormalizedEmail = "DOOMAR@ABV.BG",
                            NormalizedUserName = "D00M3R",
                            PasswordHash = "AQAAAAEAACcQAAAAENLOQimYz3OLkiehZvFcBnvyvLTiQoUX6MYZJcnCupCV9W/5khge4328bv/uGt50Gw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbbdbc1d-1365-40e2-a6b1-0ed293c858f4",
                            TwoFactorEnabled = false,
                            UserName = "d00m3r"
                        },
                        new
                        {
                            Id = "bcb4f072-ecca-43c9-ab26-c060c6f364e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "829f99ab-a753-46aa-9b47-0cd34d303f53",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            MiddleName = "Great",
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELWJ8sWHoba6HVajzMKNK2kmMa7G/GxAuzrMwBpGjsr987BLBssyrA5M/FM62u8LBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8bd8e8a-6c63-4b69-80c8-41ec4e552e64",
                            TwoFactorEnabled = false,
                            UserName = "admnin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp501.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Bartender", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Cocktail", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.TypeOfAlcohol", "Alcohol")
                        .WithMany("Cocktails")
                        .HasForeignKey("AlcoholId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApp501.Infrastructure.Data.Entities.Bartender", "Bartender")
                        .WithMany("Cocktails")
                        .HasForeignKey("BartenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApp501.Infrastructure.Data.Entities.Glass", "Glass")
                        .WithMany("Cocktails")
                        .HasForeignKey("GlassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Alcohol");

                    b.Navigation("Bartender");

                    b.Navigation("Glass");
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Image", b =>
                {
                    b.HasOne("WebApp501.Infrastructure.Data.Entities.Cocktail", "Cocktail")
                        .WithOne("Image")
                        .HasForeignKey("WebApp501.Infrastructure.Data.Entities.Image", "CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Bartender", b =>
                {
                    b.Navigation("Cocktails");
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Cocktail", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.Glass", b =>
                {
                    b.Navigation("Cocktails");
                });

            modelBuilder.Entity("WebApp501.Infrastructure.Data.Entities.TypeOfAlcohol", b =>
                {
                    b.Navigation("Cocktails");
                });
#pragma warning restore 612, 618
        }
    }
}
